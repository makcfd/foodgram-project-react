name: Django-app workflow

on: [push]

jobs:
  # tests:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up Python
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: 3.7

  #   - name: Install dependencies
  #     run: | 
  #       python -m pip install --upgrade pip
  #       pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
  #       cd api_yamdb/
  #       pip install -r requirements.txt

  #   - name: flake8 tests
  #     run: python -m flake8
  #   - name: Django tests
  #     run: pytest
  
  # notify_after_tests:
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   steps:
  #   - name: send message about tests results
  #     uses: appleboy/telegram-action@master
  #     with:
  #       to: ${{ secrets.TELEGRAM_TO }}
  #       token: ${{ secrets.TELEGRAM_TOKEN }}
  #       message: Тесты ${{ github.workflow }} репозитория ${{ github.repository }} выполнены.

  build_and_push_backend_to_docker_hub:
    name: Push backend Docker image to Docker Hub
    runs-on: ubuntu-latest
    #needs: tests
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend to Docker Hub
        uses: docker/build-push-action@v2 
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest
          context: backend

  notify_backend:
    runs-on: ubuntu-latest
    needs: build_and_push_backend_to_docker_hub
    steps:
    - name: send message about tests results
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Backend has been build and pushed to Docker Hub.

  build_and_push_frontend_to_docker_hub:
    name: Push frontend Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push frontend to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  notify_frontend:
    runs-on: ubuntu-latest
    needs: build_and_push_frontend_to_docker_hub
    steps:
    - name: send message about tests results
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Frontend has been build and pushed to Docker Hub.

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_backend_to_docker_hub
      - build_and_push_frontend_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo rm -f .env        
            sudo touch .env
            sudo chmod 666 .env
            
            sudo echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            sudo echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            sudo echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            sudo echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            sudo echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            sudo echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            
            sudo docker compose stop
            
            sudo docker compose rm backend
            sudo docker compose pull backend
            sudo docker compose rm frontend
            sudo docker compose pull frontend
            
            sudo docker compose up -d --build

  send_final_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!